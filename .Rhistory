aggregate(x = Fuel_consumption_highway_l_per_100km ~ Fuel_type,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type,
data = car_compsution,
FUN = mean)
aggregate(Class ~ Fuel_type,
data = car_compsution,
FUN = mean)
aggregate(CO2.Rating ~ Fuel_type,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_city_l_per_100km ~ Fuel_type,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_city_l_per_100km ~ Fuel_type + Class,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_city_l_per_100km ~ Fuel_type + Product_name,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_city_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_city_l_per_100km + Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_city_l_per_100km Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
aggregate(Fuel_consumption_city_l_per_100km + Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
aggregate(c('Fuel_consumption_city_l_per_100km', 'Fuel_consumption_highway_l_per_100km') ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
aggregate(c('Fuel_consumption_city_l_per_100km', 'Fuel_consumption_highway_l_per_100km') ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
order(aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean), decreasing = T)
aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)[order(aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean),]
aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)[order(aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)),]
data_final <- aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
data_final[order(data_final$Fuel_consumption_highway_l_per_100km), ]
data_final <- aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type + Make,
data = car_compsution,
FUN = mean)
data_final[order(data_final$Fuel_consumption_highway_l_per_100km, decreasing = T),]
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
# read data
head(car_compsution, 2)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
# read data
car_compsution <- read.csv("data_input/consumption_rating.csv")
print(paste("Total Row : ", dim(car_compsution)[1]))
print(paste("Total Kolom : ", dim(car_compsution)[2]))
names(car_compsution)
str(car_compsution)
summary(car_compsution)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
# read data
car_compsution <- read.csv("data_input/consumption_rating.csv")
print(paste("Total Row : ", dim(car_compsution)[1]))
print(paste("Total Kolom : ", dim(car_compsution)[2]))
names(car_compsution)
str(car_compsution)
summary(car_compsution)
head(car_compsution)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
# Pada R Studio kita juga bisa memasukan gambar dengan menggunakan code di bawah ini
knitr::include_graphics("assets/RStudio UI.PNG")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
# Pada R Studio kita juga bisa memasukan gambar dengan menggunakan code di bawah ini
knitr::include_graphics("assets/RStudio UI.PNG")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
# read data
car_compsution <- read.csv("data_input/consumption_rating.csv")
print(paste("Total Row : ", dim(car_compsution)[1]))
print(paste("Total Kolom : ", dim(car_compsution)[2]))
names(car_compsution)
str(car_compsution)
head(car_compsution)
# read data
head(car_compsution, 2)
car_compsution$Product_name <- paste0(car_compsution$Make, " " ,car_compsution$Model)
names(car_compsution)[names(car_compsution) == 'Vehicle.Class'] <- "Class"
names(car_compsution)[names(car_compsution) == 'Engine.Size.L.'] <- "Engine_in_litres"
names(car_compsution)[names(car_compsution) == 'Fuel.Type'] <- "Fuel_type"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption..City..L.100.km.'] <- "Fuel_consumption_city_l_per_100km"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption.Hwy..L.100.km..'] <- "Fuel_consumption_highway_l_per_100km"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption.Comb..L.100.km..'] <- "Fuel_consumption_combine_l_per_100km"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption.Comb..mpg..'] <- "Fuel_consumption_combine_l_mpg"
names(car_compsution)[names(car_compsution) == 'CO2.Emissions.g.km.'] <- "CO2_emission_in_g_per_km"
names(car_compsution)
car_compsution[1,]
anyNA(car_compsution)
length(unique(car_compsution$Year))
for(i in 1:length(names(car_compsution))){
print(paste("Nilai uniq", names(car_compsution)[i], length(unique(car_compsution[,i]))))
}
car_compsution$Make <- as.factor(car_compsution$Make)
car_compsution$Class <- as.factor(car_compsution$Class)
car_compsution$Fuel_type <- as.factor(car_compsution$Fuel_type)
car_compsution$Transmission <- as.factor(car_compsution$Transmission)
str(car_compsution)
x <- barplot(table(car_compsution$Class), ylim=c(0,250), xaxt="n", las=3)
labs <- paste(names(table(car_compsution$Class)))
text(cex=0.8, x=x-0, y=-65, labs, xpd=TRUE, srt=90)
aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type,
data = car_compsution,
FUN = mean)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
# read data
car_compsution <- read.csv("data_input/consumption_rating.csv")
print(paste("Total Row : ", dim(car_compsution)[1]))
print(paste("Total Kolom : ", dim(car_compsution)[2]))
names(car_compsution)
str(car_compsution)
head(car_compsution)
# read data
head(car_compsution, 2)
car_compsution$Product_name <- paste0(car_compsution$Make, " " ,car_compsution$Model)
names(car_compsution)[names(car_compsution) == 'Vehicle.Class'] <- "Class"
names(car_compsution)[names(car_compsution) == 'Engine.Size.L.'] <- "Engine_in_litres"
names(car_compsution)[names(car_compsution) == 'Fuel.Type'] <- "Fuel_type"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption..City..L.100.km.'] <- "Fuel_consumption_city_l_per_100km"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption.Hwy..L.100.km..'] <- "Fuel_consumption_highway_l_per_100km"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption.Comb..L.100.km..'] <- "Fuel_consumption_combine_l_per_100km"
names(car_compsution)[names(car_compsution) == 'Fuel.Consumption.Comb..mpg..'] <- "Fuel_consumption_combine_l_mpg"
names(car_compsution)[names(car_compsution) == 'CO2.Emissions.g.km.'] <- "CO2_emission_in_g_per_km"
names(car_compsution)
car_compsution[1,]
anyNA(car_compsution)
length(unique(car_compsution$Year))
for(i in 1:length(names(car_compsution))){
print(paste("Nilai uniq", names(car_compsution)[i], length(unique(car_compsution[,i]))))
}
car_compsution$Make <- as.factor(car_compsution$Make)
car_compsution$Class <- as.factor(car_compsution$Class)
car_compsution$Fuel_type <- as.factor(car_compsution$Fuel_type)
car_compsution$Transmission <- as.factor(car_compsution$Transmission)
str(car_compsution)
x <- barplot(table(car_compsution$Class), ylim=c(0,250), xaxt="n", las=3)
labs <- paste(names(table(car_compsution$Class)))
text(cex=0.8, x=x-0, y=-65, labs, xpd=TRUE, srt=90)
aggregate(Fuel_consumption_highway_l_per_100km ~ Fuel_type,
data = car_compsution,
FUN = mean)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
knitr::include_graphics("assets/PS.png")
# read data
supermarket <- readRDS("data_input/supermarket.RDS")
# read data
supermarket <- readRDS("data_input/supermarket.RDS")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
knitr::include_graphics("assets/PS.png")
# read data
supermarket <- readRDS("data_input/supermarket.RDS")
# melihat struktur data
str(supermarket)
# Inspect data
head(supermarket)
# hitung mean
mean(supermarket$rating)
# gunakan aggregate
aggregate(x = rating ~ branch,data = supermarket,FUN = mean)
profit <- c(55, 50, 40, 70, 60, 45, 35, 35, 60, 1000)
# mean
mean(profit)
# hist
hist(profit,breaks = 25)
# menghitung median secara manual
# gunakan order/sort
profit[order(profit,decreasing = F)]
# median manual
(50 + 55)/2
# median
median(profit)
# run chunk keseluruhan secara bersamaan
hist(profit, breaks = 25)
abline(v = mean(profit), col = "red") # garis merah = mean
abline(v = median(profit), col = "blue") # garis biru = median
# trimmed mean
mean(profit, trim = 0.1)
#mean(supermarket$gender)
#median(supermarket$gender)
# mencari frekuensi terbanyak dari product_line
names(sort(table(supermarket$product_line), decreasing = T))
# PENTING: run chunk keseluruhan secara bersamaan
most <- function(x){
# membuat tabel frekuensi
table_x <- table(x)
# mengurutkan tabel
sort_table_x <- sort(table_x, decreasing = TRUE)
# mengambil kategori
name <- names(sort_table_x)
# mengambil kategori dengan frekuensi terbesar
name[1]
}
most(supermarket$product_line)
freq <- function(x){
# membuat tabel frekuensi
table_x <- table(x)
# mengurutkan tabel
sort_table_x <- sort(table_x, decreasing = TRUE)
# mengambil kategori dengan frekuensi terbesar
sort_table_x[1]
}
freq(supermarket$product_line)
knitr::include_graphics("assets/var.PNG")
knitr::include_graphics("assets/var.PNG")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
knitr::include_graphics("assets/PS.png")
# read data
supermarket <- readRDS("data_input/supermarket.RDS")
# melihat struktur data
str(supermarket)
# Inspect data
head(supermarket)
# hitung mean
mean(supermarket$rating)
# gunakan aggregate
aggregate(x = rating ~ branch,data = supermarket,FUN = mean)
profit <- c(55, 50, 40, 70, 60, 45, 35, 35, 60, 1000)
# mean
mean(profit)
# hist
hist(profit,breaks = 25)
# menghitung median secara manual
# gunakan order/sort
profit[order(profit,decreasing = F)]
# median manual
(50 + 55)/2
# median
median(profit)
# run chunk keseluruhan secara bersamaan
hist(profit, breaks = 25)
abline(v = mean(profit), col = "red") # garis merah = mean
abline(v = median(profit), col = "blue") # garis biru = median
# trimmed mean
mean(profit, trim = 0.1)
#mean(supermarket$gender)
#median(supermarket$gender)
# mencari frekuensi terbanyak dari product_line
names(sort(table(supermarket$product_line), decreasing = T))
# PENTING: run chunk keseluruhan secara bersamaan
most <- function(x){
# membuat tabel frekuensi
table_x <- table(x)
# mengurutkan tabel
sort_table_x <- sort(table_x, decreasing = TRUE)
# mengambil kategori
name <- names(sort_table_x)
# mengambil kategori dengan frekuensi terbesar
name[1]
}
most(supermarket$product_line)
freq <- function(x){
# membuat tabel frekuensi
table_x <- table(x)
# mengurutkan tabel
sort_table_x <- sort(table_x, decreasing = TRUE)
# mengambil kategori dengan frekuensi terbesar
sort_table_x[1]
}
freq(supermarket$product_line)
knitr::include_graphics("assets/var.PNG")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
knitr::include_graphics("assets/PS.png")
# read data
supermarket <- readRDS("data_input/supermarket.RDS")
# melihat struktur data
str(supermarket)
# Inspect data
head(supermarket)
# hitung mean
mean(supermarket$rating)
# gunakan aggregate
aggregate(x = rating ~ branch,data = supermarket,FUN = mean)
profit <- c(55, 50, 40, 70, 60, 45, 35, 35, 60, 1000)
# mean
mean(profit)
# hist
hist(profit,breaks = 25)
# menghitung median secara manual
# gunakan order/sort
profit[order(profit,decreasing = F)]
# median manual
(50 + 55)/2
# median
median(profit)
# run chunk keseluruhan secara bersamaan
hist(profit, breaks = 25)
abline(v = mean(profit), col = "red") # garis merah = mean
abline(v = median(profit), col = "blue") # garis biru = median
# trimmed mean
mean(profit, trim = 0.1)
#mean(supermarket$gender)
#median(supermarket$gender)
# mencari frekuensi terbanyak dari product_line
names(sort(table(supermarket$product_line), decreasing = T))
# PENTING: run chunk keseluruhan secara bersamaan
most <- function(x){
# membuat tabel frekuensi
table_x <- table(x)
# mengurutkan tabel
sort_table_x <- sort(table_x, decreasing = TRUE)
# mengambil kategori
name <- names(sort_table_x)
# mengambil kategori dengan frekuensi terbesar
name[1]
}
most(supermarket$product_line)
freq <- function(x){
# membuat tabel frekuensi
table_x <- table(x)
# mengurutkan tabel
sort_table_x <- sort(table_x, decreasing = TRUE)
# mengambil kategori dengan frekuensi terbesar
sort_table_x[1]
}
freq(supermarket$product_line)
knitr::include_graphics("assets/var.PNG")
harga_A <- c(400,410,420,400,410,420,400,410,420,400,410,420,400)
harga_B <- c(130,430,650,540,460,320,380,550,650,470,330,140,270)
#rata-rata harga bangunan daerah A & B
mean(harga_A)
mean(harga_B)
# hitung nilai variance
var(harga_A)
var(harga_B)
profit_usd <- supermarket$gross_income
profit_idr <- supermarket$gross_income * 15000
# variance profit_usd
var(profit_usd)
# variance profit_idr
var(profit_idr)
# standar deviasi harga_A & harga_B
sd(harga_A)
sd(harga_B)
# tinjau nilai mean harga_A & harga_B
mean(harga_A)
mean(harga_B)
# hitung batas bawah dan atas dari harga wajar daerah B
409.2308 - 169.4334
409.2308 + 169.4334
saham_A <- c(1000,1200,1150,1000,950,900,1200,1300,1400,1450,1500,1600,1400,1250,1400,1600,1700,1300,1400,1300)
saham_B <- c(1300,1350,1320,1310,1280,1230,1250,1260,1280,1300,1320,1340,1300,1270,1280,1300,1320,1400,1300,1290)
mean(saham_A)
mean(saham_B)
sd(saham_A)
sd(saham_B)
summary(supermarket$gross_income)
#range
range(supermarket$gross_income)
max(supermarket$gross_income) - min(supermarket$gross_income)
#IQR
IQR(supermarket$gross_income)
knitr::include_graphics("assets/boxplot.png")
boxplot(supermarket$gross_income, horizontal = T)
boxplot(formula = gross_income ~ purchase_hour, data = supermarket, horizontal = T)
knitr::include_graphics("assets/cov-f.png")
#cov
cov(saham_A, saham_B)
knitr::include_graphics("assets/correlation-coef.jpg")
#cor
cor(saham_A, saham_B)
# scatter plot
# run seluruh code bersamaan
plot(saham_A, saham_B)
abline(lm(saham_B ~ saham_A), # garis linear `lm` akan dibahas di Machine Learning
col = 'red') # warna garis
knitr::include_graphics("assets/correlation.png")
# generate random data
RNGkind(sample.kind = "Rounding")
set.seed(100)
saham_C <- rnorm(n = 20, mean = 1000, sd = 8)
saham_D <- sample(saham_B)
saham_E <- saham_A + 50
saham <- data.frame(saham_A, saham_B, saham_C, saham_D, saham_E)
saham
# buat matriks korelasi data
cor(saham)
# install package di console:
# install.packages("GGally")
# load library:
library(GGally)
# visualisasi:
ggcorr(saham, label = T)
knitr::include_graphics("assets/statistical-cycle.svg")
knitr::include_graphics("assets/normal-distribution.jpg")
table(supermarket$product_line) / nrow(supermarket)
# cara lain menggunakan prop.table
prop.table(table(supermarket$product_line))
# cara 1: hitung Z-score lalu ubah jadi peluang
Z <- (180-165) / 10
Z
# menghitung peluang
pnorm(Z, lower.tail = F)
